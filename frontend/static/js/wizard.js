wizard = (function () {
    /*
     * Private
     */

    var _debug = true;                  /* display debug informations in the JS console */
    var _close_confirmation = false;    /* bypass the confirmation dialog on modal close */
    var _modal = null;                  /* the wizard modal panel DOM element */
    var _model = null;                  /* the wizard current render model object */
    var _dataviz_composer = null;       /* the DOM element configured from the composer */
    var _dataviz_data = null;           /* current dataviz sample data */
    var _default_definition = {};       /* dataviz configuration from the store */
    var _compose_definition = {};       /* dataviz configuration from the composer */

    /*
     * Wizard needs data to vizualize dataviz configuration
     * each data sample linked to dataviz is stored for next usage
     * in _samples_data (data provided by _getSampleData() function)
     */
    var _samples_data = {};

    /*
     * _dataviz_infos from admin.getDataviz(datavizId);
     *
     * {
        "dataviz":"epci_surface_batie_lycee",
        "description":"",
        "job":"epci_edr",
        "level":"epci",
        "source":"région Bretagne",
        "title":"Surface bâtie lycée par EPCI",
        "type":"figure",
        "unit":"m²",
        "viz":"{
                    "type":"figure",
                    "data":{},
                    "properties":{
                        "id":"epci_surface_batie_lycee",
                        "model":"b",
                        "unit":"m²",
                        "icon":"icon-appartement"
                    }
            },
        "year":"2020"
        }
     */
    var _dataviz_infos = {};

    /*
     * _dataviz_definition : last dataviz definition rendered from form values
     * (generated by _form2json then used by admin.saveVisualization)
     */
    var _dataviz_definition = {};

    /*
     * _piklor_instances - Store all piklor instances created (with a numeric index as key)
     */
    var _piklor_instances = {};

    /**
     * _initIconList - This method get icons list from api to add CSS and show them in wizard
     */
    var _initIconList = function () {
        if (_debug) console.debug('Wizard _initIconList');
        $.ajax({
            dataType: "json",
            type: "GET",
            url: [report.getAppConfiguration().api, "picto"].join("/"),
            success: function (icons) {
                if (_debug) console.debug("Réponse du backend pour la liste des icones :\n", icons);
                // rangement des icones par dossiers (affichage en onglets) et génération des CSS
                let folders = {}, styles = [];
                icons.forEach((icon) => {
                    if (! folders[icon.folder]) folders[icon.folder] = [];
                    folders[icon.folder].push(icon);
                    styles.push('.' + icon.id + ' { background-image: url(' + icon.url + '); }');
                    styles.push('img.' + icon.id + ' { background: transparent; content: url(' + icon.url + '); }');
                });
                // insertion du code CSS pour les icones dans la balise head de l'interface
                document.querySelector("style#picto-css").innerHTML = styles.join('\n');
                // génération du code HTML du sélecteur d'icone (tabs Bootstrap)
                let container = document.getElementById('wizard-icons');
                if (container) {
                    let tabs_head = [], tabs_body = [], first = true;
                    for (const [folder, icons] of Object.entries(folders).sort()) {
                        // code HTML de l'onglet
                        let html_head = '<a role="tab" data-toggle="tab"';
                        html_head+= (first) ? ' class="nav-item nav-link active" aria-selected="true"' : ' class="nav-item nav-link" aria-selected="false"';
                        html_head+= ` id="icon-${folder}-tab" href="#icon-${folder}-pane" aria-controls="icon-${folder}-pane">${folder}</a>`;
                        tabs_head.push(html_head);
                        // code HTML du panneau
                        let html_body = '<div role="tabpanel" class="tab-pane fade'+ ((first)?" show active":"") + '"';
                        html_body+= ` id="icon-${folder}-pane" aria-labelledby="icon-${folder}-pane">`;
                        html_body+= '<ul class="icon-picker-list">';
                        html_body+= icons.map((icon) => { return `<li class="custom-icon ${icon.id}" data-class="${icon.id}"></li>`; }).join('\n');
                        html_body+= '</ul></div>';
                        tabs_body.push(html_body);
                        first = false;
                    }
                    container.innerHTML = '<nav><div class="nav nav-tabs" id="icon-nav-tab" role="tablist">\n' + tabs_head.join('\n') + '</div></nav>\n';
                    container.innerHTML+= '<div class="tab-content" id="icon-nav-tabContent">\n' + tabs_body.join('\n') + '</div>\n';
                    $(".icon-picker-list li.custom-icon").on('click', function(e) {
                        let input = _modal.querySelector('#dataviz-attributes .dataviz-attributes[data-prop="icon"]');
                        if (input) {
                            input.value = e.currentTarget.dataset.class;
                            input.dispatchEvent(new Event('change'));
                        }
                        document.getElementById('wizard-view').classList.remove('backcard');
                    });
                }
            },
            error: function (xhr, status, error) {
                console.warn("Échec lors de la récupération de la liste des icones disponibles du serveur :\n" + error);
            }
        });
    };

    /**
     * _onModalOpened - This method is linked to open wizard modal event,
     * it initialize the form for the dataviz to configure and generate the preview
     * @param  {event} evt
     */
    var _onModalOpened = function (evt) {
        if (_debug) console.debug('Wizard _onModalOpened', evt);
        // clear wizard form and current data
        _clean();
        
        // detect wich component calls this and adapt the interface
        if (evt.relatedTarget.dataset.component === "composer") {
            // store dataviz DOM element edited from the composer
            _dataviz_composer = evt.relatedTarget.closest(".dataviz-item");
            if (! _dataviz_composer) { console.error("Wizard: dataviz non retrouvée dans le composer"); return; }
            // buttons: enable "add to report" / disable "select model"
            document.getElementById("wizard-compose-save").classList.remove("hidden");
            document.getElementById("selectedModelWizard").disabled = true;
        } else {
            // buttons: disable "add to report" / enable "select model"
            document.getElementById("wizard-compose-save").classList.add("hidden");
            document.getElementById("selectedModelWizard").disabled = false;
        }
        
        // get datavizid linked to the wizard modal (from button attribute data-related-id)
        let datavizId = evt.relatedTarget.dataset.relatedId;
        if (! datavizId) { console.error("Wizard: dataviz à configurer non spécifiée"); return; }
        _modal.querySelector(".modal-title tt").innerText = datavizId;
        _modal.dataset.relatedId = datavizId;
        
        // get dataviz infos (description, title, unit, viz...) if exists
        _dataviz_infos = admin.getDataviz(datavizId);
        if (_debug) console.debug("Dataviz store informations:\n", _dataviz_infos);
        
        // download data for this dataviz (new sample overrides data saved in the store)
        _getSampleData(datavizId, function(success, data = null){
            if (success) _dataviz_data = data;
            
            // get dataviz definition for wizard (form default + store + composer)
            let definition = _initDatavizDefinition();
            definition.properties.id = datavizId;
            if (_debug) console.debug("Dataviz aggregated definition:\n", definition);
            
            // determine the render model to use for previews
            let modelId = document.getElementById("selectedModelWizard").value;
            if (_dataviz_composer) modelId = composer.getModelId() || definition.properties.model || modelId || "composer";
            else                   modelId = definition.properties.model || composer.getModelId() || modelId || "composer";
            
            // load active model then initialize the wizard form and renderer
            models.load(modelId, function(success, data = null){
                // apply render model for wizard
                _initRenderModel(success ? data : null);
                // configure wizard options with dataviz capabilities
                _initDatavizTypeOptions(datavizId);
                // apply config if exists
                _initFormParameters(definition);
                // render dataviz in result panel
                _renderDatavizPreview();
            });
        });
    };

    /**
     * _clean - Method to clear wizard form and modal data
     */
    var _clean = function () {
        if (_debug) console.debug('Wizard _clean');
        _close_confirmation = false;
        _dataviz_composer = null;
        _dataviz_data = null;
        _dataviz_infos = {};
        _default_definition = {};
        _compose_definition = {};
        _dataviz_definition = {};
        $("#wizard-parameters .nav-tabs .nav-link").first().tab('show');
        document.getElementById("dataviz-attributes").classList.add('d-none');
        document.getElementById("wizard-form-apply").disabled = true;
        // remove state class
        _modal.classList.remove('state-changed');
        _modal.classList.remove('state-modified');
        _modal.classList.remove('state-configured');
        // remove all form values
        document.getElementById("w_dataviz_type").value = "";
        _modal.querySelectorAll(".dataviz-attributes").forEach((el) => {
            if (el.type == 'checkbox') el.checked = false; else el.value = "";
        });
        // remove color pickers
        _modal.querySelectorAll(".color-picker-wrapper .available-colors").forEach((el) => { el.remove(); });
        _modal.querySelectorAll(".color-picker-wrapper .btn-color").forEach((el) => { el.remove(); });
        Object.keys(_piklor_instances).forEach((index) => { delete _piklor_instances[ index ]; });
        // remove dataviz id references
        _modal.dataset.relatedId = "";
        _modal.querySelector(".modal-title tt").innerText = "";
        // remove existing result (dataviz preview with css)
        _modal.querySelector("#wizard-view .dataviz-result").className = "dataviz-result preloader";
        _modal.querySelector("#wizard-view .dataviz-result").innerHTML = "";
        _modal.querySelector(".wizard-code code").innerText = "";
        document.querySelector("style#model-slot2").innerHTML = "";
    };

    /**
     * Method to extract a set of data in relation with dataviz
     * and necessary to configure and visualize a dataviz for a report
     * Result is stored in _samples_data[xxx] to reuse it later
     * @param  {string} datavizId
     */
    var _getSampleData = function (datavizId, callback = null) {
        if (_debug) console.debug('Wizard _getSampleData for dataviz:', datavizId);
        if (_samples_data[ datavizId ]) {
            if (callback) callback(true, _samples_data[ datavizId ]);
            return;
        }
        // get sample data linked to dataviz, format it and store it for later
        $.ajax({
            type: "GET",
            dataType: "json",
            url: [report.getAppConfiguration().api, "store", datavizId, "data/sample"].join("/")
        })
        .fail(function (xhr, status, error) {
            console.error("Erreur lors de l'interrogation des sample data pour : " + datavizId, error);
            if (callback) callback(false);
        })
        .done(function (data, status, xhr) {
            if (data.response !== "success") {
                console.error("Erreur : Impossible de récupérer l'échantillon de données :\n", data);
                if (callback) callback(false);
                return;
            }
            if (! data.data) {
                console.error("Erreur : Échantillon de données récupéré invalide :\n", data);
                if (callback) callback(false);
                return;
            }
            if (_debug) console.debug("Réponse du backend pour l'échantillon :\n", data);
            //update local data
            let tmp_data = {
                "dataset": {}
            };
            let formatedData = {
                "dataset": [],
                "data": [],
                "label": [],
                "rows": 0,
                "significative_label": false
            };
            //test multilines and format data and populate formatedData
            if (data.data.length === 1) {
                //eg figure : data = {"data":"1984","dataset":"bigbrother","label":"Roman de G. Orwell","order":1}
                let a = data.data[0];
                formatedData = {
                    "dataset": [a.dataset],
                    "data": [a.data],
                    "label": [a.label],
                    "rows": 1,
                    "significative_label": true
                };
            } else {
                /* eg graph with 2 datasets: data = [
                    {"data":"10","dataset":"voitures","label":"2019","order":1},
                    {"data":"15","dataset":"voitures","label":"2020","order":2},
                    {"data":"12","dataset":"vélos","label":"2019","order":1},
                    {"data":"13","dataset":"vélos","label":"2020","order":2}
                ]
                   or graph with one dataset  : data = [
                    {"data":"75%","dataset":"budget","label":"disponible","order":1},
                    {"data":"25%","dataset":"budget","label":"dépensé","order":2}
                   ]
                */
                data.data.forEach(function (item) {
                    if (tmp_data.dataset[item.dataset]) {
                        tmp_data.dataset[item.dataset].data.push(item.data);
                        tmp_data.dataset[item.dataset].label.push(item.label);
                    } else {
                        tmp_data.dataset[item.dataset] = {
                            "data": [item.data],
                            "label": [item.label]
                        };
                        formatedData.dataset.push(item.dataset);
                    }
                });
                /* if more than one dataset store data and labels in this model :
                 *   [
                        [dataset1.value1, dataset1.value2],
                        [dataset2.value1, dataset2.value2]
                    ]
                */
                if (formatedData.dataset.length > 1) {
                    formatedData.dataset.forEach(function (dataset) {
                        formatedData.data.push(tmp_data.dataset[dataset].data);
                        formatedData.label.push(tmp_data.dataset[dataset].label);
                    });
                    formatedData.rows = formatedData.data[0].length;
                    // Test if labels are significative. If then labels can be used as column in table dataviz
                    let uniqueItems = new Set(formatedData.label[0]);
                    formatedData.significative_label = (uniqueItems.size > 1);
                } else {
                    /* Put directly data and labels from the unique dataset
                        [value1, value2]
                    */
                    formatedData.data = tmp_data.dataset[formatedData.dataset[0]].data;
                    formatedData.label = tmp_data.dataset[formatedData.dataset[0]].label;
                    formatedData.rows = formatedData.data.length;
                    // Test if labels are significative. If then labels can be used as column in table dataviz
                    let uniqueItems = new Set(formatedData.label[0]);
                    formatedData.significative_label = (uniqueItems.size > 1);
                }
            }
            if (_debug) console.debug("Sample data for dataviz " + datavizId + " :\n", formatedData);
            _samples_data[datavizId] = formatedData;
            if (callback) callback(true, _samples_data[datavizId]);
        });
    };

    /**
     * _initDatavizDefinition - Aggrégation des définitions par défaut et configurées pour l'initialisation du formulaire
     */
    var _initDatavizDefinition = function () {
        if (_debug) console.debug('Wizard _initDatavizDefinition');
        
        // get the current report dataviz definition (if called from the composer)
        if (_dataviz_composer) {
            let compose_code = _dataviz_composer.querySelector("code.dataviz-definition");
            let viz = (compose_code) ? compose_code.innerText.trim() : "";
            if (viz) try {
                _compose_definition = JSON.parse( viz );
                if (_debug) console.debug("Dataviz composer definition:\n", _compose_definition);
                // use sample data from composer definition (only if no sample yet) ?
                if (_compose_definition.data && ! _dataviz_data) _dataviz_data = _compose_definition.data[ _dataviz_infos.dataviz ];
            } catch (err) { console.warn("Dataviz compose definition is invalid", viz, err); }
        }
        if (! _compose_definition.properties) _compose_definition.properties = {};
        
        // get default dataviz configuration (stored if needed later for a reset to default action)
        if (_dataviz_infos.viz) {
            let viz = _dataviz_infos.viz.trim();
            if (viz) try {
                _default_definition = JSON.parse( viz );
                if (_default_definition.properties) {
                    // application de correctifs : propriété "title" sous forme objet à convertir en texte
                    if (_default_definition.properties.title && _default_definition.properties.title.charAt(0) == '{') try {
                        let otitle = JSON.parse( _default_definition.properties.title );
                        if (otitle.text) _default_definition.properties.title = otitle.text;
                    } catch (err) {}
                }
                if (_debug) console.debug("Dataviz default definition:\n", _default_definition);
                // use sample data from store configuration (only if no sample yet) ?
                if (_default_definition.data && ! _dataviz_data) _dataviz_data = _default_definition.data[ _dataviz_infos.dataviz ];
            } catch (err) { console.warn("Dataviz default definition is invalid", viz, err); }
        }
        if (! _default_definition.properties) _default_definition.properties = {};
        
        // set default values for wizard form
        let nb_datasets = (_dataviz_data.dataset) ? _dataviz_data.dataset.length : 0;
        let properties = {
            "id":           _dataviz_infos.dataviz     || "",
            "title":        _dataviz_infos.title       || "",
            "description":  _dataviz_infos.description || "",
            "unit":         _dataviz_infos.unit        || "",
            "type":         "bar",
            "icon":         "icon-default",
            "iconposition": "custom-icon",
            "zoom":         12,
            "opacity":      "0.75",
            "ratio":        "2:1",
            "colors":       Array( nb_datasets ).fill('#'),  // => _model.colors.slice(0, nb_datasets)
            "label":        (nb_datasets > 1) ? _dataviz_data.dataset : ["Légende"],
            "columns":      Array( nb_datasets ).fill().map((v,k) => k+1),
            "extracolumn":  (_dataviz_data.significative_label) ? "#" : "",
            "stacked":      false,
            "begin0":       true,
            "hidelegend":   false,
            "showlabels":   false,
        };
        
        // and merge with the current definition from composer
        let definition = Object.assign({}, _default_definition, _compose_definition);
        definition.properties = Object.assign(properties, _default_definition.properties, _compose_definition.properties);
        if (! definition.type) definition.type = _dataviz_infos.type;
        return definition;
    };

    /**
     * _initRenderModel - Set selected render model and load CSS for dataviz preview
     */
    var _initRenderModel = function (model) {
        if (_debug) console.debug('Wizard _initRenderModel', model);
        if (! model || ! model.id || ! model.ref) return;
        _model = model;
        document.getElementById("selectedModelWizard").value = _model.ref;
        document.querySelector("style#model-slot2").innerHTML = _model.page_styles;
        _modal.querySelector("#wizard-view .dataviz-result").className = "dataviz-result preloader " + _model.id;
        if (_debug) console.debug("Changement du modèle pour le rendu de la dataviz : " + _model.ref);
    };

    /**
     * _initDatavizTypeOptions - Method to configure wizard options with dataviz capabilities
     * Update options in select control #w_dataviz_type
     * @param  {string} datavizId
     */
    var _initDatavizTypeOptions = function (datavizId) {
        if (_debug) console.debug('Wizard _initDatavizTypeOptions', datavizId);
        let select = _modal.querySelector('select#w_dataviz_type');
        if (! select) return console.error("Sélecteur du type de dataviz non disponible");
        
        // devine le type de données en examinant l'échantillon disponible
        let data_type = "text";
        let firstData = (_dataviz_data && _dataviz_data.data) ? _dataviz_data.data[0] : null;
        if (firstData) {
            if (_dataviz_data.dataset.length === 1) {
                const reUrl = new RegExp(/^((http[s]?|ftp):\/)?\/?([^:\/\s]+)((\/\w+)*\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$/);
                if      (reUrl.test(firstData))            data_type = "url";
                else if (firstData.startsWith("POINT"))    data_type = "geom";
            } else if (firstData[0]) {
                if      (firstData[0].startsWith("POINT")) data_type = "geom";
            }
        }
        
        let options = [];
        if (data_type === "geom") options.push("map");
        // many datasets || One dataset with multiple lines => table, chart
        if (_dataviz_data && (_dataviz_data.dataset.length > 1 || _dataviz_data.rows > 1)) {
            options.push("chart");
            if (_dataviz_data.significative_label) options.push("table");
        }
        // one dataset only (1 dataset une seule ligne => figure, text, iframe, image)
        else if (data_type === "text") options.push("figure", "text");
        else if (data_type === "url")  options.push("iframe", "image");
        
        // remove all existing options and generate the new ones
        while (select.options.length > 0) select.remove(0);
        select.add(new Option("...", ""), undefined);
        for (let i = 0; i < options.length; i++) select.add(new Option(options[i], options[i]), undefined);
    };

    /**
     * _initFormParameters - Method to set values from dataviz config and populate wizard form.
     * @param  {object} cfg
     * ex: { "type":"figure", "properties":{ "unit": "m²", "colors": "orange,blue" } }
     */
    var _initFormParameters = function (cfg) {
        if (_debug) console.debug('Wizard _initFormParameters', cfg);
        if (! cfg.properties || ! cfg.properties.id) return;
        
        let input;
        let nb_dataset = _dataviz_data.dataset.length;
        let with_label = _dataviz_data.significative_label;
        
        // update wizard form with dataviz values
        _json2form(cfg);
        
        // set colors for Piklor lib
        input = _modal.querySelector('#dataviz-attributes .dataviz-attributes[data-prop="colors"]');
        if (input) input.value.split(',').forEach((color) => { if (color) _createColorPicker(color, nb_dataset); });
        
        // disable some input fields
        input = _modal.querySelector('#dataviz-attributes .dataviz-attributes[data-prop="stacked"]');
        if (input) input.disabled = (nb_dataset > 1) ? false : true;
        input = _modal.querySelector('#dataviz-attributes .dataviz-attributes[data-prop="extracolumn"]');
        if (input) input.disabled = (with_label) ? false : true;
        
        // show fields linked to dataviz type (table, figure, chart...)
        _showFormParameters(cfg.type);
        _modal.classList.remove('state-changed');
    };

    /**
     * _json2form - Method to populate wizard form parameters from dataviz definition
     * @param  {object} viz
     */
    var _json2form = function (viz) {
        if (_debug) console.debug('Wizard _json2form', viz);
        let input;
        for (let [attribute, value] of Object.entries(viz.properties)) switch (attribute) {
            case "id":
                input = _modal;
                if (input && ! input.dataset.relatedId) input.dataset.relatedId = value;
                break;
            case "model":
                input = document.getElementById("selectedModelWizard");
                if (input && ! input.value) input.value = value;
                break;
            case "columns" :  // hugly
                input = _modal.querySelector('#dataviz-attributes .dataviz-attributes[data-prop="'+attribute+'"]');
                if (! input) console.warn("json2form error : aucun input pour la propriété " + attribute);
                else input.value = ( (value[0] === 1) ? value.map(x => x - 1) : value );
                break;
            case "colors" :
                if (Array.isArray(value)) value.forEach(function(color, i) {
                    // replace empty color value with one from the model palette
                    if ((! color) || (color == '#')) value[i] = _model.colors[i] || '#000';
                });
            case "label" :
                value = value.join(',');
            default:
                input = _modal.querySelector('#dataviz-attributes .dataviz-attributes[data-prop="'+attribute+'"]');
                if (! input) console.warn("json2form error : aucun input pour la propriété " + attribute);
                else if (input.type == "checkbox") input.checked = value;
                else input.value = value;
        }
        document.getElementById("w_dataviz_type").value = viz.type;
    };

    /**
     * _createColorPicker - Method to set a new Piklor instance for a new color to edit
     * @param  {string} color_code
     * @param  {int} nb_datasets
     */
    var _createColorPicker = function (color_code = null, nb_datasets = null) {
        if (_debug) console.debug('Wizard _createColorPicker', color_code, nb_datasets);
        let is_new = (color_code === null) ? true : false;
        if (! color_code) color_code = (_model.colors) ? _model.colors[0] : '#ffffff';
//      if (! nb_datasets) nb_datasets = (typeof _data !== "undefined") ? _data.dataset.length : 1; // TODO: pour limiter le add ?
        let index = (Math.max(0, Math.max(...Object.keys( _piklor_instances ))) || 0) + 1;
        
        let button = document.createElement('button');
        button.className = "btn-color piklor-" + index;
        button.style.backgroundColor = button.dataset.color = color_code;
        button.innerHTML = "&nbsp;";
        let palette = document.createElement('div');
        palette.className = "available-colors piklor-" + index;
        let wrapper = _modal.querySelector("#color-pickers .color-picker-wrapper");
        wrapper.appendChild(button);
        wrapper.appendChild(palette);
        
        let input = _modal.querySelector("#color-pickers input.dataviz-attributes");
        let pk = new Piklor(palette, (_model.colors) ? _model.colors : [], {
            closeOnBlur: true,
            manualInput: true,
            removeColor: true,
            open: button
        })
        pk.colorChosen(function (color) {
            if (this.options.open) this.options.open.style.backgroundColor = (color !== false) ? color : "";
            let colors = Array.from(wrapper.querySelectorAll("button.btn-color"), (btn) => btn.dataset.color);
            if (input) {
                input.value = colors.join(",");
                input.dispatchEvent(new Event('change'));
            }
        });
        _piklor_instances[ index ] = pk;
        
        if (input) {
            input.style.display = "none";
            if (is_new) input.dispatchEvent(new Event('change'));
        }
    };

    /**
     * _showFormParameters - Method to show fields linked to dataviz type (table, figure, chart...)
     * @param  {string} datavizType
     */
    var _showFormParameters = function (datavizType) {
        if (_debug) console.debug('Wizard _showFormParameters', datavizType);
        // adaptation du libellé de la propriété "label" selon le type chart|table
        let input = _modal.querySelector('#dataviz-attributes .dataviz-attributes[data-prop="label"]');
        if (input) input = input.closest(".attribute");
        if (input) input = input.querySelector(".input-group-text");
        if (input) switch (datavizType) {
            case "chart" : input.innerText = "séries"; break;
            case "table" : input.innerText = "labels"; break;
        }
        // affichage uniquement des champs du formulaire correspondants au type
        let container = document.getElementById("dataviz-attributes");
        container.querySelectorAll(".attribute").forEach((el) => el.classList.add('d-none'));
        container.querySelectorAll(".attribute.type-" + datavizType).forEach((el) => el.classList.remove('d-none'));
        container.classList.remove('d-none');
        document.getElementById("wizard-form-apply").disabled = false;
    };

    /**
     * _renderDatavizPreview. This method pass a config object to the report.testViz method.
     * Used by #wizard_refresh button and the auto render method in _onModalOpened
     */
    var _renderDatavizPreview = function () {
        if (_debug) console.debug('Wizard _renderDatavizPreview');
        let w_result = _modal.querySelector("#wizard-view .dataviz-result");
        w_result.classList.add("preloader");
        w_result.innerHTML = "";
        
        // use the render model cell wrapper for the dataviz preview
        let container;
        if (_model.page_layouts['wcell']) {
            w_result.insertAdjacentHTML("beforeend", _model.page_layouts['wcell']);
            container = w_result.querySelector(".components-container");
        }
        if (! container) container = w_result;
        
        // get dataviz component herited from template and set attributes with properties object
        _dataviz_definition = _form2json(true /* sample data included */);
        _modal.querySelector(".wizard-code code").innerText = JSON.stringify(_dataviz_definition);
        let html = _model.renderDataviz(_dataviz_definition);
        w_result.classList.remove("preloader");
        
        // détermine si le wizard à générer une configuration différente de celle sauvegardée
        if (_compare_definitions(_default_definition, _dataviz_definition))
            _modal.classList.remove('state-modified');
        else _modal.classList.add('state-modified');
        if (_dataviz_composer) {
            if (_compare_definitions(_compose_definition, _dataviz_definition))
                _modal.classList.remove('state-configured');
            else _modal.classList.add('state-configured');
        }
        
        // render result in wizard modal
        if (! (html instanceof Node)) { container.innerText = "ERROR: " + html; return; }
        container.appendChild(html);
        
        // draw dataviz with data, type and properties
//      let viz_data = {}; viz_data[ _dataviz_definition.properties.id ] = _dataviz_data;
        report.testViz(/*viz_data*/ _dataviz_definition.data, _dataviz_definition.type, _dataviz_definition.properties);
        _modal.classList.remove('state-changed');
    };

    /**
     * _form2json - This method get values from wizard form parameters
     * and populate a json config object (dataviz definition)
     * @param  {bool} with_data : true to include sample data in definition
     */
    var _form2json = function (with_data = false) {
        if (_debug) console.debug('Wizard _form2json', with_data);
        let dvz_type = document.getElementById("w_dataviz_type").value;
        let properties = {
            "id":    _modal.dataset.relatedId,
            "model": document.getElementById("selectedModelWizard").value,
        };
        _modal.querySelectorAll("#dataviz-attributes .attribute.type-"+dvz_type+" .dataviz-attributes").forEach((input) => {
            const val  = (input.type == 'checkbox') ? input.checked : input.value;
            const prop = input.dataset.prop;
            if (prop) switch (prop) {
                case "label":
                case "colors":
                    properties[ prop ] = (val.length) ? val.split(",") : [];
                    break;
                case "columns":
                    properties[ prop ] = val.split(",").map((v) => Number(v));
                    break;
                default:
                    properties[ prop ] = val;
            }
        });
        // store config dataviz in json object
        let definition = {
            "type": dvz_type,
            "properties": properties,
            "data": {}
        };
        // add the samples data to the JSON definition (saved in store or composer) ?
        if (with_data) definition.data[ definition.properties.id ] = _dataviz_data;
        else delete definition.data;
        
        if (_debug) console.debug("Configuration JSON générée par le formulaire :\n", definition);
        return definition;
    };

    /**
     * _compare_definitions
     * @param  {object} viz1
     * @param  {object} viz2
     */
    var _compare_definitions = function (viz1, viz2) {
        // fonction de tri récursive des propriétés
        const jsonSortReplacer = (key, val) =>
          ((val instanceof Object) && !(val instanceof Array))
          ? Object.keys(val).sort().reduce((sorted, key) => {
              sorted[key] = val[key]; return sorted;
          }, {})
          : val;
        // clonage des objets avec leurs propriétés
        let def1 = Object.assign({}, viz1);
        let def2 = Object.assign({}, viz2);
        // retrait des propriétés non déterminantes
        if ('data' in def1) delete def1.data;
        if ('data' in def2) delete def2.data;
        ['model','plugins'].forEach((prop) => {
            if (prop in def1.properties) delete def1.properties[prop];
            if (prop in def2.properties) delete def2.properties[prop];
        });
        // comparaison des chaines JSON
        if (_debug) console.debug(JSON.stringify(def1, jsonSortReplacer));
        if (_debug) console.debug(JSON.stringify(def2, jsonSortReplacer));
        return (JSON.stringify(def1, jsonSortReplacer) == JSON.stringify(def2, jsonSortReplacer));
    };

    /**
     * _onChangeModel - Linked with the render model selector
     * TODO: update piklor palettes
     * @param  {event} evt
     */
    var _onChangeModel = function (evt) {
        if (_debug) console.debug('Wizard _onChangeModel', evt);
        models.load(evt.target.value, function(success, data){
            _modal.classList.add('state-changed');
            // apply render model for wizard
            _initRenderModel(success ? data : null);
            // refresh dataviz preview
            _renderDatavizPreview();
        });
    };

    /**
     * _onChangeDatavizType - This method is linked to #w_dataviz_type select control event change
     * @param  {event} evt
     */
    var _onChangeDatavizType = function (evt) {
        if (_debug) console.debug('Wizard _onChangeDatavizType', evt);
        _modal.classList.add('state-changed');
        // show fields linked to dataviz type
        _showFormParameters( evt.target.value );
        // refresh dataviz renderer
        _renderDatavizPreview();
    };

    /**
     * _onChangeDatavizForm - This method is linked to all dataviz attributes event change
     * @param  {event} evt
     */
    var _onChangeDatavizForm = function (evt) {
        if (_debug) console.debug("Wizard _onChangeParameter", evt);
        _modal.classList.add('state-changed');
    };

    /**
     * _saveDatavizStore - This method call the dataviz default representation save from the wizard definition result
     */
    var _saveDatavizStore = function () {
        if (_debug) console.debug('Wizard _saveDatavizStore');
        admin.saveDataviz(_dataviz_definition, function(success, viz){
            if (! success) return;
            _modal.classList.remove('state-modified');
            if (_dataviz_composer) return;
            // fermeture automatique de la modal si enregistrement store réussi (sans venir du composer)
            _close_confirmation = true;
            $(_modal).modal("hide");
        });
    };

    /**
     * _saveDatavizComposer - This method copy paste dataviz json definition from wizard result to composition
     */
    var _saveDatavizComposer = function () {
        if (_debug) console.debug('Wizard _saveDatavizComposer');
        if (! _dataviz_composer) { console.error("Dataviz en cours d'édition à configurer non disponible"); return; }
        // update dataviz definition in the composer
        composer.configDataviz(_dataviz_composer, _dataviz_definition);
        _modal.classList.remove('state-configured');
        // close wizard modal (clean on close event, without confirmation)
        _close_confirmation = true;
        $(_modal).modal("hide");
    };

    /**
     * _onModalClose - This method is linked to close wizard modal event,
     * it can prevent closing the modal with a confirmation dialog, or execute end actions
     */
    var _onModalClose = function () {
        if (! _close_confirmation) {
            // fermeture sans configuration si aucun état de modification non enregistrée
            if (_dataviz_composer) {
                if (! _modal.classList.contains('state-changed') && ! _modal.classList.contains('state-configured'))
                    _close_confirmation = true;
            } else {
                if (! _modal.classList.contains('state-changed') && ! _modal.classList.contains('state-modified'))
                    _close_confirmation = true;
            }
        }
        if (_debug) console.debug('Wizard _onModalClose', _close_confirmation);
        
        if (! _close_confirmation) {
            // affiche le dialogue de confirmation
            Swal.fire({
                title: "Êtes-vous sûr de vouloir quitter l'assistant ?",
                text: "Il semble que vous ayez effectué des modifications non enregistrées...",
                icon: 'warning',
                buttonsStyling: false,
                customClass: {
                  cancelButton: 'btn btn-secondary mr-2',
                  confirmButton: 'btn btn-danger ml-2',
                },
                showCancelButton: true,
                cancelButtonText: "Rester",
                confirmButtonText: "Quitter",
                reverseButtons: true,
                focusCancel: true,
                allowOutsideClick: false,
            }).then((result) => {
                // code exécuté après la fermeture de la boîte de dialogue Swal
                if (_debug) console.debug("onModalclose result:", result);
                if (result.isConfirmed) {
//                  admin.saveVisualization(_dataviz_definition);
                    _close_confirmation = true;
                    $(_modal).modal("hide");
                }
            });
            // annule la fermeture de la modal
            return false;
        }
        // exécute les actions à la fermeture
        _clean();
        return true;
    };

    /**
     * this method initializes wizard
     */
    var _init = function () {
        Chart.plugins.unregister(ChartDataLabels);
        // load wizard html dynamicly and append it admin.html
        if (! _modal) $.ajax({
            url: "/static/html/wizard.html?dc=" + Date.now(),
            dataType: "text",
            success: function (html) {
                $("body").append(html);
                _modal = document.getElementById('wizard-panel');
                if (_debug) _modal.querySelector(".wizard-code").classList.remove('hidden');
                // wizard modal events management
                $(_modal).on('show.bs.modal', _onModalOpened);
                $(_modal).on('hide.bs.modal', _onModalClose);
                $("#selectedModelWizard").on('change', _onChangeModel);
                $("#w_dataviz_type").on('change', _onChangeDatavizType);
                $("#dataviz-attributes").find("input,textarea,select").on('change', _onChangeDatavizForm);
                $("#wizard-form-apply").on('click', _renderDatavizPreview);
                $("#wizard-compose-save").on('click', _saveDatavizComposer);
                $("#wizard-default-save").on('click', _saveDatavizStore);
                $("#color-pickers .color-picker-add").on('click', function(evt){ _createColorPicker(null); });
                // initialisation de la liste des pictos (à partir du backend)
                _initIconList();
            }
        });
    };

    /*
     * Public
     */
    return {
        /* used by wizard.js */
        init:          _init
    };

})();

$(document).ready(function() {
    wizard.init();
});
